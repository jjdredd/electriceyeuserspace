#include <stdio.h>
#include <windows.h>
#include <setupapi.h>
#include <devguid.h>
#include <regstr.h>
#include <Cfgmgr32.h>

   int main( int argc, char *argv[ ], char *envp[ ] )
   {
       HDEVINFO hDevInfo;
       SP_DEVINFO_DATA DeviceInfoData;
       DWORD i;
       GUID ClassGuid{0x4d36e968, 0xe325, 0x11ce, {0xbf, 0xc1, 0x08, 0x00, 0x2b, 0xe1, 0x03, 0x18} };
        PLOG_CONF plc0;
        PRESDES rd;
        RESDES plc;

            // Create a HDEVINFO with all present devices.
       hDevInfo = SetupDiGetClassDevs(&ClassGuid,
           0, // Enumerator
           0,
           DIGCF_PRESENT);

       if (hDevInfo == INVALID_HANDLE_VALUE)
       {
           // Insert error handling here.
           return 1;
       }

       // Enumerate through all devices in Set.

       DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
       for (i=0;SetupDiEnumDeviceInfo(hDevInfo,i,
           &DeviceInfoData);i++)
       {
           DWORD DataT;
           LPTSTR buffer = NULL;
           DWORD buffersize = 0;

           //
           // Call function with null to begin with,
           // then use the returned buffer size (doubled)
           // to Alloc the buffer. Keep calling until
           // success or an unknown failure.
           //
           //  Double the returned buffersize to correct
           //  for underlying legacy CM functions that
           //  return an incorrect buffersize value on
           //  DBCS/MBCS systems.
           //
           while (!SetupDiGetDeviceRegistryProperty(
               hDevInfo,
               &DeviceInfoData,
               SPDRP_DEVICEDESC,
               &DataT,
               (PBYTE)buffer,
               buffersize,
               &buffersize))
           {
               if (GetLastError() ==
                   ERROR_INSUFFICIENT_BUFFER)
               {
                   // Change the buffer size.
                   if (buffer) LocalFree(buffer);
                   // Double the size to avoid problems on
                   // W2k MBCS systems per KB 888609.
                   buffer = (char *)LocalAlloc(LPTR,buffersize * 2);
               }
               else
               {
                   // Insert error handling here.
                   break;
               }
           }

	   CM_Add_Empty_Log_Conf(plc0, DeviceInfoData.DevInst, LCPRI_NORMAL, BASIC_LOG_CONF); //BOOT_LOG_CONF ???
            plc = plc0;
            while( CM_Get_Next_Res_Des(rd, plc, ) == CR_SUCCESS){


            }
           printf("Result:[%s]\n",buffer);

           if (buffer) LocalFree(buffer);
       }


       if ( GetLastError()!=NO_ERROR &&
            GetLastError()!=ERROR_NO_MORE_ITEMS )
       {
           // Insert error handling here.
           return 1;
       }

       //  Cleanup
       CM_Free_Log_Conf(plc0,0);
       SetupDiDestroyDeviceInfoList(hDevInfo);

       return 0;
   }
